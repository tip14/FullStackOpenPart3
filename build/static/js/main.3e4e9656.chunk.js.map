{"version":3,"sources":["components/Filter.js","components/PersonForm.js","services/persons.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["Filter","onFilterNameChange","filterName","onChange","value","PersonForm","formControls","onNewNameChange","newName","onNewNumberChange","newNumber","onClick","addPerson","type","dbUrl","exprt","getAll","axios","get","then","response","data","add","newPerson","post","update","updatedPerson","put","id","remove","personId","delete","PersonEntry","onRemove","name","number","window","confirm","personService","Persons","persons","filter","person","startsWith","map","Notification","message","className","success","App","useState","setPersons","setNewName","setNewNumber","setFilterName","notification","setNotification","useEffect","setDisposableNotification","setTimeout","event","target","preventDefault","alreadySavedPerson","find","p","withUpdated","catch","newPersonSaved","concat","deletedPersonId","withoutDeleted","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e4e9656.chunk.js","sourcesContent":["const Filter = ({onFilterNameChange, filterName}) => {\n    return <p>filter shown with <input onChange={onFilterNameChange} value={filterName} /></p>\n}\n\nexport default Filter;","const PersonForm = ({formControls}) => {\n    return (\n        <>\n            <form>\n                <div>name: <input onChange={formControls.onNewNameChange} value={formControls.newName} /></div>\n                <div>number: <input onChange={formControls.onNewNumberChange} value={formControls.newNumber} /></div>\n                <div>\n                    <button onClick={formControls.addPerson} type=\"submit\">add</button>\n                </div>\n            </form>\n        </>\n    )\n};\n\nexport default PersonForm;","import axios from 'axios'\n\nconst dbUrl = 'http://localhost:3001/api/persons';\n\nconst getAll = () => {\n    return axios.get(dbUrl).then(response => response.data);\n}\n\nconst add = (newPerson) => {\n    return axios.post(dbUrl, newPerson).then(response => response.data);\n}\n\nconst update = (updatedPerson) => {\n    return axios.put(dbUrl + '/' + updatedPerson.id, updatedPerson).then(response => {\n        return response.data;\n    })\n}\n\n\nconst remove = (personId) => {\n    return axios.delete(`${dbUrl}/${personId}`);\n}\n\nconst exprt = {getAll, add, update, remove};\n\nexport default exprt;","import personService from '../services/persons';\n\n\nconst PersonEntry = ({ data, onRemove }) => {\n    const deletePerson = () => {\n        const deleteConfirmed = window.confirm(`Delete ${data.name}?`);\n        if (deleteConfirmed) {\n            personService.remove(data.id).then(() => onRemove(data.id));\n        }\n    };\n    return (\n        <>\n            <p>{data.name} {data.number} <button onClick={deletePerson}>delete</button></p>\n        </>\n    )\n}\n\n\n\nconst Persons = ({ persons, filterName, onRemove }) => {\n    const filterNumberForDisplay = person => person.name.startsWith(filterName);\n    const mapNumberForDisplay = person => <PersonEntry data={person} key={person.name} onRemove={onRemove} />;\n\n    return (\n        <>\n            {persons.filter(filterNumberForDisplay).map(mapNumberForDisplay)}\n        </>\n    )\n}\n\n\n\nexport default Persons;","const Notification = ({data}) => {\n    if(!data.message) return null;\n\n    return <p className={data.success ? 'notification-success' : 'notification-error'}>{data.message}</p>\n}\n\nexport default Notification;","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons';\nimport personService from './services/persons';\nimport Notification from './components/Notification';\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filterName, setFilterName] = useState('')\n  const [notification, setNotification] = useState({})\n\n  useEffect(() => {\n    personService.getAll()\n      .then(persons => setPersons(persons));\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    const alreadySavedPerson = persons.find(p => p.name === newName);\n    if (alreadySavedPerson) {\n      const updateConfirmed = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`);\n      if (updateConfirmed) {\n        const updatedPerson = { ...alreadySavedPerson, number: newNumber };\n        personService\n          .update(updatedPerson)\n          .then(updatedPerson => {\n            const withUpdated = persons.map(p => {\n              if (p.id === updatedPerson.id) {\n                p.name = updatedPerson.name;\n                p.number = updatedPerson.number;\n              }\n\n              return p;\n            })\n            setPersons(withUpdated);\n            setDisposableNotification({message: `Updated ${updatedPerson.name} number`, success: true});\n          })\n          .catch(() => setDisposableNotification({message: `Information of ${updatedPerson.name} has already been removed from server`, success: false}));\n      }\n    } else {\n      const newPerson = { name: newName, number: newNumber };\n      personService.add(newPerson).then((newPersonSaved) => {\n        setPersons(persons.concat(newPersonSaved));\n        setNewName('');\n        setNewNumber('');\n        setDisposableNotification({message: `Added ${newPersonSaved.name}`, success: true});\n      })\n    }\n  }\n\n  const setDisposableNotification = (notification) => {\n    setNotification(notification);\n    setTimeout(() => setNotification({}), 5000);\n  }\n\n  const onNewNameChange = (event) => {\n    setNewName(event.target.value);\n  }\n\n  const onNewNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  }\n\n  const onFilterNameChange = (event) => {\n    setFilterName(event.target.value);\n  }\n\n  const onPersonRemove = (deletedPersonId) => {\n    const withoutDeleted = persons.filter(p => p.id !== deletedPersonId);\n    setPersons(withoutDeleted);\n  }\n\n\n  const formControls = {\n    onNewNameChange: onNewNameChange,\n    onNewNumberChange: onNewNumberChange,\n    addPerson: addPerson,\n    newName: newName,\n    newNumber: newNumber\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification data={notification} />\n      <Filter onFilterNameChange={onFilterNameChange} filterName={filterName} />\n      <h3>add a new</h3>\n      <PersonForm formControls={formControls} />\n      <h3>Numbers</h3>\n      <Persons persons={persons} filterName={filterName} onRemove={onPersonRemove} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}